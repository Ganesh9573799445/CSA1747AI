import math

# Function to print the board
def print_board(board):
    print(f"{board[0]} | {board[1]} | {board[2]}")
    print("--+---+--")
    print(f"{board[3]} | {board[4]} | {board[5]}")
    print("--+---+--")
    print(f"{board[6]} | {board[7]} | {board[8]}")

# Function to check if the current board has a winner
def check_winner(board, player):
    win_conditions = [(0, 1, 2), (3, 4, 5), (6, 7, 8),  # Rows
                      (0, 3, 6), (1, 4, 7), (2, 5, 8),  # Columns
                      (0, 4, 8), (2, 4, 6)]             # Diagonals
    return any(board[a] == board[b] == board[c] == player for a, b, c in win_conditions)

# Function to check if the board is full
def is_full(board):
    return ' ' not in board

# Minimax algorithm implementation
def minimax(board, is_maximizing):
    # Base cases: check for winner or full board
    if check_winner(board, 'O'):
        return 1  # 'O' is maximizing player (AI)
    if check_winner(board, 'X'):
        return -1  # 'X' is minimizing player (Human)
    if is_full(board):
        return 0  # Draw

    # Maximizing player's turn (AI - 'O')
    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'  # AI makes a move
                score = minimax(board, False)  # Call minimax for minimizing player
                board[i] = ' '  # Undo move
                best_score = max(best_score, score)
        return best_score

    # Minimizing player's turn (Human - 'X')
    else:
        best_score = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'  # Human makes a move
                score = minimax(board, True)  # Call minimax for maximizing player
                board[i] = ' '  # Undo move
                best_score = min(best_score, score)
        return best_score

# Function to find the best move for the AI
def best_move(board):
    best_score = -math.inf
    move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'  # AI makes a move
            score = minimax(board, False)  # Call minimax for human's turn
            board[i] = ' '  # Undo move
            if score > best_score:
                best_score = score
                move = i
    return move

# Main function to play the game
def tic_tac_toe():
    board = [' '] * 9
    while True:
        # Print the board
        print_board(board)

        # Human player (X) input
        try:
            move = int(input("Enter your move (1-9): ")) - 1
            if board[move] != ' ':
                print("Invalid move. Try again.")
                continue
        except (ValueError, IndexError):
            print("Invalid input. Please enter a number between 1 and 9.")
            continue

        # Human makes the move
        board[move] = 'X'

        # Check if human won
        if check_winner(board, 'X'):
            print_board(board)
            print("You win!")
            break

        # Check if the board is full
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break

        # AI (O) makes the best move
        ai_move = best_move(board)
        board[ai_move] = 'O'

        # Check if AI won
        if check_winner(board, 'O'):
            print_board(board)
            print("AI wins!")
            break

        # Check if the board is full
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break

# Run the game
tic_tac_toe()
