import math

# Function to print the board
def print_board(board):
    print(f"{board[0]} | {board[1]} | {board[2]}")
    print("--+---+--")
    print(f"{board[3]} | {board[4]} | {board[5]}")
    print("--+---+--")
    print(f"{board[6]} | {board[7]} | {board[8]}")

# Function to check if the current board has a winner
def check_winner(board, player):
    win_conditions = [(0, 1, 2), (3, 4, 5), (6, 7, 8),  # Rows
                      (0, 3, 6), (1, 4, 7), (2, 5, 8),  # Columns
                      (0, 4, 8), (2, 4, 6)]             # Diagonals
    return any(board[a] == board[b] == board[c] == player for a, b, c in win_conditions)

# Function to check if the board is full
def is_full(board):
    return ' ' not in board

# Minimax algorithm with alpha-beta pruning
def minimax(board, depth, alpha, beta, is_maximizing):
    if check_winner(board, 'O'):
        return 1
    if check_winner(board, 'X'):
        return -1
    if is_full(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                eval = minimax(board, depth + 1, alpha, beta, False)
                board[i] = ' '
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break  # Prune the remaining branches
        return max_eval
    else:
        min_eval = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                eval = minimax(board, depth + 1, alpha, beta, True)
                board[i] = ' '
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break  # Prune the remaining branches
        return min_eval

# Function to find the best move for the AI
def best_move(board):
    best_score = -math.inf
    move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'  # AI makes a move
            score = minimax(board, 0, -math.inf, math.inf, False)  # Minimax with alpha-beta pruning
            board[i] = ' '  # Undo move
            if score > best_score:
                best_score = score
                move = i
    return move

# Main function to play the game
def tic_tac_toe():
    board = [' '] * 9
    while True:
        # Print the board
        print_board(board)

        # Human player (X) input
        try:
            move = int(input("Enter your move (1-9): ")) - 1
            if board[move] != ' ':
                print("Invalid move. Try again.")
                continue
        except (ValueError, IndexError):
            print("Invalid input. Please enter a number between 1 and 9.")
            continue

        # Human makes the move
        board[move] = 'X'

        # Check if human won
        if check_winner(board, 'X'):
            print_board(board)
            print("You win!")
            break

        # Check if the board is full
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break

        # AI (O) makes the best move
        ai_move = best_move(board)
        board[ai_move] = 'O'

        # Check if AI won
        if check_winner(board, 'O'):
            print_board(board)
            print("AI wins!")
            break

        # Check if the board is full
        if is_full(board):
            print_board(board)
            print("It's a draw!")
            break

# Run the game
tic_tac_toe()
