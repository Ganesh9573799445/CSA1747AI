def print_board(board):
    for row in board:
        print(" ".join(row))
    print("\n")


def is_safe(board, row, col):
    # Check this row on left side
    for i in range(col):
        if board[row][i] == 'Q':
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False

    # Check lower diagonal on left side
    for i, j in zip(range(row, len(board), 1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False

    return True


def solve_n_queens(board, col):
    # If all queens are placed, print the solution
    if col >= len(board):
        print_board(board)
        return True

    res = False
    # Consider this column and try placing a queen in all rows one by one
    for i in range(len(board)):
        if is_safe(board, i, col):
            # Place this queen in board[i][col]
            board[i][col] = 'Q'

            # Recur to place rest of the queens
            res = solve_n_queens(board, col + 1) or res

            # If placing queen in board[i][col] doesn't lead to a solution
            # then backtrack: remove the queen
            board[i][col] = '.'

    # If the queen cannot be placed in any row in this column col then return False
    return res


def solve():
    n = 8  # For 8x8 board
    board = [['.' for _ in range(n)] for _ in range(n)]
    if not solve_n_queens(board, 0):
        print("Solution does not exist")


# Run the solver
solve()
