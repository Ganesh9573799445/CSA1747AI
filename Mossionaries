from collections import deque

def is_valid(state):
    """
    Check if the state is valid: the number of missionaries should never be
    less than the number of cannibals on either side, unless there are no missionaries.
    """
    m_left, c_left, boat = state
    m_right = 3 - m_left
    c_right = 3 - c_left

    if (m_left >= c_left or m_left == 0) and (m_right >= c_right or m_right == 0):
        return True
    return False

def get_successors(state):
    """
    Generate all possible successor states from the current state.
    """
    successors = []
    m_left, c_left, boat = state

    if boat == 'left':
        # Possible moves from left to right
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]  # (Missionaries, Cannibals)
        for m, c in moves:
            new_state = (m_left - m, c_left - c, 'right')
            if new_state[0] >= 0 and new_state[1] >= 0 and is_valid(new_state):
                successors.append(new_state)
    else:
        # Possible moves from right to left
        moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]  # (Missionaries, Cannibals)
        for m, c in moves:
            new_state = (m_left + m, c_left + c, 'left')
            if new_state[0] <= 3 and new_state[1] <= 3 and is_valid(new_state):
                successors.append(new_state)

    return successors

def bfs():
    # Initial state: (Missionaries on the left, Cannibals on the left, Boat position)
    initial_state = (3, 3, 'left')
    goal_state = (0, 0, 'right')

    # Use a queue to explore states in BFS manner
    queue = deque([(initial_state, [])])
    visited = set()

    while queue:
        state, path = queue.popleft()

        # Check if the goal state is reached
        if state == goal_state:
            print("Solution found!")
            for step in path + [state]:
                print(step)
            return

        # If state has been visited, skip it
        if state in visited:
            continue

        # Mark state as visited
        visited.add(state)

        # Get successor states and add them to the queue
        for successor in get_successors(state):
            queue.append((successor, path + [state]))

    print("No solution found.")

# Run the BFS algorithm
bfs()
